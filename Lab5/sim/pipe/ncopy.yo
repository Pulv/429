                            | #Pablo Velasco
                            | #pcv256
                            | # nopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | #
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #First, I added the function iaddq in order to skip the two step irmovq -> addq in order to add numbers. The iaddq also set off flags, so it was no longer necessary to use andqs to see if numbers were > < = to 0. 
                            | #Next, I unrolled by a factor of 8. I checked if the length - 8 > 0, then it would loop through the 8-unrolled code. Once the length was < 8, it would check if it was even. If it was not, it would go through a single loop, which would make the length even. Then it would roll through the even loop until it finished.
                            | #I moved some of the commands so that there would be no data dependencies (mr -> mr -> ... rm -> rm -> ...). This included placing blocks of code so it would fall into other blocks rather than take jumps (Even -> Done since it will end on even most of the time). 
                            | #I also changed some values to hex in order to read the value quicker (it was a .02 increase)
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
                            |         # Loop header
                            |         #r11 for even
0x000: 6300                 |         xorq %rax,%rax         # count = 0;
0x002: 6222                 |         andq %rdx,%rdx          # len <= 0?
0x004: 717702000000000000   |         jle Done                # if so, goto Done:
0x00d: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x017: 718f01000000000000   | 	jle test
0x020:                      | Eight:
0x020: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x02a: 50370800000000000000 | 	mrmovq 0x8(%rdi), %rbx
0x034: 50e71000000000000000 | 	mrmovq 0x10(%rdi), %r14
0x03e: 50871800000000000000 | 	mrmovq 0x18(%rdi), %r8
0x048: 50972000000000000000 | 	mrmovq 0x20(%rdi), %r9
0x052: 50a72800000000000000 | 	mrmovq 0x28(%rdi), %r10
0x05c: 50b73000000000000000 | 	mrmovq 0x30(%rdi), %r11
0x066: 50c73800000000000000 | 	mrmovq 0x38(%rdi), %r12
0x070: 40160000000000000000 | 	rmmovq %rcx, (%rsi)
0x07a: 40360800000000000000 | 	rmmovq %rbx, 0x8(%rsi)
0x084: 40e61000000000000000 | 	rmmovq %r14, 0x10(%rsi)
0x08e: 40861800000000000000 | 	rmmovq %r8, 0x18(%rsi)
0x098: 40962000000000000000 | 	rmmovq %r9, 0x20(%rsi)
0x0a2: 40a62800000000000000 | 	rmmovq %r10, 0x28(%rsi)
0x0ac: 40b63000000000000000 | 	rmmovq %r11, 0x30(%rsi)
0x0b6: 40c63800000000000000 | 	rmmovq %r12, 0x38(%rsi)
0x0c0: 6211                 | 	andq %rcx, %rcx
0x0c2: 71d500000000000000   | 	jle first
0x0cb: c0f00100000000000000 | 	iaddq $0x1, %rax
0x0d5:                      | first:
0x0d5: 6233                 | 	andq %rbx, %rbx
0x0d7: 71ea00000000000000   | 	jle second
0x0e0: c0f00100000000000000 | 	iaddq $0x1, %rax
0x0ea:                      | second:
0x0ea: 62ee                 | 	andq %r14, %r14
0x0ec: 71ff00000000000000   | 	jle third
0x0f5: c0f00100000000000000 | 	iaddq $0x1, %rax
0x0ff:                      | third:
0x0ff: 6288                 | 	andq %r8, %r8
0x101: 711401000000000000   | 	jle fourth
0x10a: c0f00100000000000000 | 	iaddq $0x1, %rax
0x114:                      | fourth:
0x114: 6299                 | 	andq %r9, %r9
0x116: 712901000000000000   | 	jle fifth
0x11f: c0f00100000000000000 | 	iaddq $0x1, %rax
0x129:                      | fifth:
0x129: 62aa                 | 	andq %r10, %r10
0x12b: 713e01000000000000   | 	jle sixth
0x134: c0f00100000000000000 | 	iaddq $0x1, %rax
0x13e:                      | sixth:
0x13e: 62bb                 | 	andq %r11, %r11
0x140: 715301000000000000   | 	jle seventh
0x149: c0f00100000000000000 | 	iaddq $0x1, %rax
0x153:                      | seventh:
0x153: 62cc                 | 	andq %r12, %r12
0x155: 716801000000000000   | 	jle done
0x15e: c0f00100000000000000 | 	iaddq $0x1, %rax
0x168:                      | done:
0x168: c0f74000000000000000 | 	iaddq $0x40, %rdi
0x172: c0f64000000000000000 | 	iaddq $0x40, %rsi
0x17c: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x186: 762000000000000000   | 	jg Eight
0x18f:                      | test:
0x18f: c0f20800000000000000 | 	iaddq $0x8, %rdx
0x199: 30fd0100000000000000 | 	irmovq $0x1, %r13
0x1a3: 622d                 | 	andq %rdx, %r13
0x1a5: 73fe01000000000000   | 	je Even
0x1ae:                      | Loop:
0x1ae: 50a70000000000000000 |         mrmovq (%rdi), %r10   
0x1b8: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1c2: 62aa                 | 	andq %r10, %r10
0x1c4: 71d701000000000000   |         jle Npos          
0x1cd: c0f00100000000000000 |         iaddq $0x1, %rax
0x1d7:                      | Npos:
0x1d7: c0f70800000000000000 |         iaddq $0x8, %rdi      
0x1e1: c0f60800000000000000 |         iaddq $0x8, %rsi       
0x1eb: c0f2ffffffffffffffff |         iaddq $-1, %rdx    
0x1f5: 737702000000000000   | 	je Done
0x1fe:                      | Even:
0x1fe: 50c70000000000000000 |         mrmovq (%rdi), %r12
0x208: 50b70800000000000000 |         mrmovq 0x8(%rdi), %r11
0x212: 40c60000000000000000 |         rmmovq %r12, (%rsi)
0x21c: 40b60800000000000000 |         rmmovq %r11, 0x8(%rsi)
0x226: 62cc                 |         andq %r12, %r12
0x228: 713b02000000000000   |         jle notPos
0x231: c0f00100000000000000 |         iaddq $0x1, %rax
0x23b:                      | notPos:
0x23b: 62bb                 |         andq %r11, %r11
0x23d: 715002000000000000   |         jle finishEven
0x246: c0f00100000000000000 |         iaddq $0x1, %rax
0x250:                      | finishEven:
0x250: c0f71000000000000000 |         iaddq $0x10, %rdi
0x25a: c0f61000000000000000 |         iaddq $0x10, %rsi
0x264: c0f2feffffffffffffff |         iaddq $-2, %rdx
0x26e: 76fe01000000000000   |         jg Even
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x277:                      | Done:
0x277: 90                   |         ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x278:                      | End:
                            | #/* $end ncopy-ys */
