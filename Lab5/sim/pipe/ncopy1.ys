#Pablo Velasco
#pcv256
# nopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
#
#
# Describe how and why you modified the baseline code.
#First, I added the function iaddq in order to skip the two step irmovq -> addq in order to add numbers. The iaddq also set off flags, so it was no longer necessary to use andqs to see if numbers were > < = to 0. 
#Next, I unrolled by a factor of 8. I checked if the length - 8 > 0, then it would loop through the 8-unrolled code. Once the length was < 8, it would check if it was even. If it was not, it would go through a single loop, which would make the length even. Then it would roll through the even loop until it finished.
#I moved some of the commands so that there would be no data dependencies (mr -> mr -> ... rm -> rm -> ...). This included placing blocks of code so it would fall into other blocks rather than take jumps (Even -> Done since it will end on even most of the time). 
#I also changed some values to hex in order to read the value quicker (it was a .02 increase)
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
##################################################################
# You can modify this portion
        # Loop header
        #r11 for even
        xorq %rax,%rax         # count = 0;
        andq %rdx,%rdx          # len <= 0?
        jle Done                # if so, goto Done:
	iaddq $-8, %rdx
	jle test
Eight:
	mrmovq (%rdi), %rcx
	mrmovq 0x8(%rdi), %rbx
	mrmovq 0x10(%rdi), %r14
	mrmovq 0x18(%rdi), %r8
	mrmovq 0x20(%rdi), %r9
	mrmovq 0x28(%rdi), %r10
	mrmovq 0x30(%rdi), %r11
	mrmovq 0x38(%rdi), %r12
	rmmovq %rcx, (%rsi)
	rmmovq %rbx, 0x8(%rsi)
	rmmovq %r14, 0x10(%rsi)
	rmmovq %r8, 0x18(%rsi)
	rmmovq %r9, 0x20(%rsi)
	rmmovq %r10, 0x28(%rsi)
	rmmovq %r11, 0x30(%rsi)
	rmmovq %r12, 0x38(%rsi)
	andq %rcx, %rcx
	jle first
	iaddq $0x1, %rax
first:
	andq %rbx, %rbx
	jle second
	iaddq $0x1, %rax
second:
	andq %r14, %r14
	jle third
	iaddq $0x1, %rax
third:
	andq %r8, %r8
	jle fourth
	iaddq $0x1, %rax
fourth:
	andq %r9, %r9
	jle fifth
	iaddq $0x1, %rax
fifth:
	andq %r10, %r10
	jle sixth
	iaddq $0x1, %rax
sixth:
	andq %r11, %r11
	jle seventh
	iaddq $0x1, %rax
seventh:
	andq %r12, %r12
	jle done
	iaddq $0x1, %rax
done:
	iaddq $0x40, %rdi
	iaddq $0x40, %rsi
	iaddq $-8, %rdx
	jg Eight
test:
	iaddq $0x8, %rdx
	irmovq $0x1, %r13
	andq %rdx, %r13
	je Even
Loop:
        mrmovq (%rdi), %r10   
	rmmovq %r10, (%rsi)
	andq %r10, %r10
        jle Npos          
        iaddq $0x1, %rax
Npos:
        iaddq $0x8, %rdi      
        iaddq $0x8, %rsi       
        iaddq $-1, %rdx    
	je Done
Even:
        mrmovq (%rdi), %r12
        mrmovq 0x8(%rdi), %r11
        rmmovq %r12, (%rsi)
        rmmovq %r11, 0x8(%rsi)
        andq %r12, %r12
        jle notPos
        iaddq $0x1, %rax
notPos:
        andq %r11, %r11
        jle finishEven
        iaddq $0x1, %rax
finishEven:
        iaddq $0x10, %rdi
        iaddq $0x10, %rsi
        iaddq $-2, %rdx
        jg Even
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
        ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
