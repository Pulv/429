                            | #######################################################################
                            | # Test for copying block of size 256;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c014000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20001000000000000 | 	irmovq $256, %rdx		# src and dst have 256 elements
0x014: 30f6380c000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80b302000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #Pablo Velasco
                            | #pcv256
                            | # nopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | #
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #First, I added the function iaddq in order to skip the two step irmovq -> addq in order to add numbers. The iaddq also set off flags, so it was no longer necessary to use andqs to see if numbers were > < = to 0. 
                            | #Next, I unrolled by a factor of 8. I checked if the length - 8 > 0, then it would loop through the 8-unrolled code. Once the length was < 8, it would check if it was even. If it was not, it would go through a single loop, which would make the length even. Then it would roll through the even loop until it finished.
                            | #I moved some of the commands so that there would be no data dependencies (mr -> mr -> ... rm -> rm -> ...). This included placing blocks of code so it would fall into other blocks rather than take jumps (Even -> Done since it will end on even most of the time). 
                            | #I also changed some values to hex in order to read the value quicker (it was a .02 increase)
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
                            |         # Loop header
                            |         #r11 for even
0x03b: 6300                 |         xorq %rax,%rax         # count = 0;
0x03d: 6222                 |         andq %rdx,%rdx          # len <= 0?
0x03f: 71b202000000000000   |         jle Done                # if so, goto Done:
0x048: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x052: 71ca01000000000000   | 	jle test
0x05b:                      | Eight:
0x05b: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x065: 50370800000000000000 | 	mrmovq 0x8(%rdi), %rbx
0x06f: 50e71000000000000000 | 	mrmovq 0x10(%rdi), %r14
0x079: 50871800000000000000 | 	mrmovq 0x18(%rdi), %r8
0x083: 50972000000000000000 | 	mrmovq 0x20(%rdi), %r9
0x08d: 50a72800000000000000 | 	mrmovq 0x28(%rdi), %r10
0x097: 50b73000000000000000 | 	mrmovq 0x30(%rdi), %r11
0x0a1: 50c73800000000000000 | 	mrmovq 0x38(%rdi), %r12
0x0ab: 40160000000000000000 | 	rmmovq %rcx, (%rsi)
0x0b5: 40360800000000000000 | 	rmmovq %rbx, 0x8(%rsi)
0x0bf: 40e61000000000000000 | 	rmmovq %r14, 0x10(%rsi)
0x0c9: 40861800000000000000 | 	rmmovq %r8, 0x18(%rsi)
0x0d3: 40962000000000000000 | 	rmmovq %r9, 0x20(%rsi)
0x0dd: 40a62800000000000000 | 	rmmovq %r10, 0x28(%rsi)
0x0e7: 40b63000000000000000 | 	rmmovq %r11, 0x30(%rsi)
0x0f1: 40c63800000000000000 | 	rmmovq %r12, 0x38(%rsi)
0x0fb: 6211                 | 	andq %rcx, %rcx
0x0fd: 711001000000000000   | 	jle first
0x106: c0f00100000000000000 | 	iaddq $0x1, %rax
0x110:                      | first:
0x110: 6233                 | 	andq %rbx, %rbx
0x112: 712501000000000000   | 	jle second
0x11b: c0f00100000000000000 | 	iaddq $0x1, %rax
0x125:                      | second:
0x125: 62ee                 | 	andq %r14, %r14
0x127: 713a01000000000000   | 	jle third
0x130: c0f00100000000000000 | 	iaddq $0x1, %rax
0x13a:                      | third:
0x13a: 6288                 | 	andq %r8, %r8
0x13c: 714f01000000000000   | 	jle fourth
0x145: c0f00100000000000000 | 	iaddq $0x1, %rax
0x14f:                      | fourth:
0x14f: 6299                 | 	andq %r9, %r9
0x151: 716401000000000000   | 	jle fifth
0x15a: c0f00100000000000000 | 	iaddq $0x1, %rax
0x164:                      | fifth:
0x164: 62aa                 | 	andq %r10, %r10
0x166: 717901000000000000   | 	jle sixth
0x16f: c0f00100000000000000 | 	iaddq $0x1, %rax
0x179:                      | sixth:
0x179: 62bb                 | 	andq %r11, %r11
0x17b: 718e01000000000000   | 	jle seventh
0x184: c0f00100000000000000 | 	iaddq $0x1, %rax
0x18e:                      | seventh:
0x18e: 62cc                 | 	andq %r12, %r12
0x190: 71a301000000000000   | 	jle done
0x199: c0f00100000000000000 | 	iaddq $0x1, %rax
0x1a3:                      | done:
0x1a3: c0f74000000000000000 | 	iaddq $0x40, %rdi
0x1ad: c0f64000000000000000 | 	iaddq $0x40, %rsi
0x1b7: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1c1: 765b00000000000000   | 	jg Eight
0x1ca:                      | test:
0x1ca: c0f20800000000000000 | 	iaddq $0x8, %rdx
0x1d4: 30fd0100000000000000 | 	irmovq $0x1, %r13
0x1de: 622d                 | 	andq %rdx, %r13
0x1e0: 733902000000000000   | 	je Even
0x1e9:                      | Loop:
0x1e9: 50a70000000000000000 |         mrmovq (%rdi), %r10   
0x1f3: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1fd: 62aa                 | 	andq %r10, %r10
0x1ff: 711202000000000000   |         jle Npos          
0x208: c0f00100000000000000 |         iaddq $0x1, %rax
0x212:                      | Npos:
0x212: c0f70800000000000000 |         iaddq $0x8, %rdi      
0x21c: c0f60800000000000000 |         iaddq $0x8, %rsi       
0x226: c0f2ffffffffffffffff |         iaddq $-1, %rdx    
0x230: 73b202000000000000   | 	je Done
0x239:                      | Even:
0x239: 50c70000000000000000 |         mrmovq (%rdi), %r12
0x243: 50b70800000000000000 |         mrmovq 0x8(%rdi), %r11
0x24d: 40c60000000000000000 |         rmmovq %r12, (%rsi)
0x257: 40b60800000000000000 |         rmmovq %r11, 0x8(%rsi)
0x261: 62cc                 |         andq %r12, %r12
0x263: 717602000000000000   |         jle notPos
0x26c: c0f00100000000000000 |         iaddq $0x1, %rax
0x276:                      | notPos:
0x276: 62bb                 |         andq %r11, %r11
0x278: 718b02000000000000   |         jle finishEven
0x281: c0f00100000000000000 |         iaddq $0x1, %rax
0x28b:                      | finishEven:
0x28b: c0f71000000000000000 |         iaddq $0x10, %rdi
0x295: c0f61000000000000000 |         iaddq $0x10, %rsi
0x29f: c0f2feffffffffffffff |         iaddq $-2, %rdx
0x2a9: 763902000000000000   |         jg Even
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2b2:                      | Done:
0x2b2: 90                   |         ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2b3:                      | End:
                            | #/* $end ncopy-ys */
0x2b3:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 128.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x2b3:                      | check:
                            | 	# Return value test
0x2b3: 30fa8000000000000000 | 	irmovq $128,%r10
0x2bd: 61a0                 | 	subq %r10,%rax
0x2bf: 73db02000000000000   | 	je checkb
0x2c8: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2d2: 701904000000000000   | 	jmp cdone
0x2db:                      | checkb:
                            | 	# Code length check
0x2db: 30f0b302000000000000 | 	irmovq EndFun,%rax
0x2e5: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2ef: 6120                 | 	subq %rdx,%rax
0x2f1: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2fb: 6102                 | 	subq %rax,%rdx
0x2fd: 751903000000000000   | 	jge checkm
0x306: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x310: 701904000000000000   | 	jmp cdone
0x319:                      | checkm:
0x319: 30f2380c000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x323: 30f32004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x32d: 30f70001000000000000 | 	irmovq $256,%rdi  # Count
0x337: 6277                 | 	andq %rdi,%rdi
0x339: 739703000000000000   | 	je checkpre         # Skip check if count = 0
0x342:                      | mcloop:
0x342: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x34c: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x356: 6160                 | 	subq %rsi,%rax
0x358: 737403000000000000   | 	je  mok
0x361: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x36b: 701904000000000000   | 	jmp cdone
0x374:                      | mok:
0x374: 30f00800000000000000 | 	irmovq $8,%rax
0x37e: 6002                 | 	addq %rax,%rdx	  # dest ++
0x380: 6003                 | 	addq %rax,%rbx    # src++
0x382: 30f00100000000000000 | 	irmovq $1,%rax
0x38c: 6107                 | 	subq %rax,%rdi    # cnt--
0x38e: 764203000000000000   | 	jg mcloop
0x397:                      | checkpre:
                            | 	# Check for corruption
0x397: 30f2300c000000000000 | 	irmovq Predest,%rdx
0x3a1: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x3ab: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x3b5: 6120                 | 	subq %rdx,%rax
0x3b7: 73d303000000000000   | 	je checkpost
0x3c0: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3ca: 701904000000000000   | 	jmp cdone
0x3d3:                      | checkpost:
                            | 	# Check for corruption
0x3d3: 30f23814000000000000 | 	irmovq Postdest,%rdx
0x3dd: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3e7: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3f1: 6120                 | 	subq %rdx,%rax
0x3f3: 730f04000000000000   | 	je checkok
0x3fc: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x406: 701904000000000000   | 	jmp cdone
0x40f:                      | checkok:
                            | 	# Successful checks
0x40f: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x419:                      | cdone:
0x419: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x420:                      | 	.align 8
0x420:                      | src:
0x420: ffffffffffffffff     | 	.quad -1
0x428: feffffffffffffff     | 	.quad -2
0x430: fdffffffffffffff     | 	.quad -3
0x438: 0400000000000000     | 	.quad 4
0x440: fbffffffffffffff     | 	.quad -5
0x448: faffffffffffffff     | 	.quad -6
0x450: f9ffffffffffffff     | 	.quad -7
0x458: f8ffffffffffffff     | 	.quad -8
0x460: f7ffffffffffffff     | 	.quad -9
0x468: 0a00000000000000     | 	.quad 10
0x470: 0b00000000000000     | 	.quad 11
0x478: 0c00000000000000     | 	.quad 12
0x480: 0d00000000000000     | 	.quad 13
0x488: f2ffffffffffffff     | 	.quad -14
0x490: f1ffffffffffffff     | 	.quad -15
0x498: 1000000000000000     | 	.quad 16
0x4a0: 1100000000000000     | 	.quad 17
0x4a8: 1200000000000000     | 	.quad 18
0x4b0: edffffffffffffff     | 	.quad -19
0x4b8: ecffffffffffffff     | 	.quad -20
0x4c0: 1500000000000000     | 	.quad 21
0x4c8: 1600000000000000     | 	.quad 22
0x4d0: 1700000000000000     | 	.quad 23
0x4d8: e8ffffffffffffff     | 	.quad -24
0x4e0: 1900000000000000     | 	.quad 25
0x4e8: e6ffffffffffffff     | 	.quad -26
0x4f0: 1b00000000000000     | 	.quad 27
0x4f8: e4ffffffffffffff     | 	.quad -28
0x500: e3ffffffffffffff     | 	.quad -29
0x508: 1e00000000000000     | 	.quad 30
0x510: 1f00000000000000     | 	.quad 31
0x518: e0ffffffffffffff     | 	.quad -32
0x520: 2100000000000000     | 	.quad 33
0x528: 2200000000000000     | 	.quad 34
0x530: ddffffffffffffff     | 	.quad -35
0x538: 2400000000000000     | 	.quad 36
0x540: 2500000000000000     | 	.quad 37
0x548: daffffffffffffff     | 	.quad -38
0x550: d9ffffffffffffff     | 	.quad -39
0x558: 2800000000000000     | 	.quad 40
0x560: 2900000000000000     | 	.quad 41
0x568: d6ffffffffffffff     | 	.quad -42
0x570: d5ffffffffffffff     | 	.quad -43
0x578: 2c00000000000000     | 	.quad 44
0x580: 2d00000000000000     | 	.quad 45
0x588: 2e00000000000000     | 	.quad 46
0x590: 2f00000000000000     | 	.quad 47
0x598: d0ffffffffffffff     | 	.quad -48
0x5a0: cfffffffffffffff     | 	.quad -49
0x5a8: 3200000000000000     | 	.quad 50
0x5b0: 3300000000000000     | 	.quad 51
0x5b8: ccffffffffffffff     | 	.quad -52
0x5c0: 3500000000000000     | 	.quad 53
0x5c8: 3600000000000000     | 	.quad 54
0x5d0: c9ffffffffffffff     | 	.quad -55
0x5d8: 3800000000000000     | 	.quad 56
0x5e0: c7ffffffffffffff     | 	.quad -57
0x5e8: c6ffffffffffffff     | 	.quad -58
0x5f0: 3b00000000000000     | 	.quad 59
0x5f8: c4ffffffffffffff     | 	.quad -60
0x600: c3ffffffffffffff     | 	.quad -61
0x608: 3e00000000000000     | 	.quad 62
0x610: 3f00000000000000     | 	.quad 63
0x618: 4000000000000000     | 	.quad 64
0x620: 4100000000000000     | 	.quad 65
0x628: beffffffffffffff     | 	.quad -66
0x630: 4300000000000000     | 	.quad 67
0x638: bcffffffffffffff     | 	.quad -68
0x640: bbffffffffffffff     | 	.quad -69
0x648: baffffffffffffff     | 	.quad -70
0x650: b9ffffffffffffff     | 	.quad -71
0x658: b8ffffffffffffff     | 	.quad -72
0x660: 4900000000000000     | 	.quad 73
0x668: b6ffffffffffffff     | 	.quad -74
0x670: 4b00000000000000     | 	.quad 75
0x678: b4ffffffffffffff     | 	.quad -76
0x680: b3ffffffffffffff     | 	.quad -77
0x688: b2ffffffffffffff     | 	.quad -78
0x690: 4f00000000000000     | 	.quad 79
0x698: b0ffffffffffffff     | 	.quad -80
0x6a0: afffffffffffffff     | 	.quad -81
0x6a8: aeffffffffffffff     | 	.quad -82
0x6b0: adffffffffffffff     | 	.quad -83
0x6b8: acffffffffffffff     | 	.quad -84
0x6c0: 5500000000000000     | 	.quad 85
0x6c8: aaffffffffffffff     | 	.quad -86
0x6d0: 5700000000000000     | 	.quad 87
0x6d8: a8ffffffffffffff     | 	.quad -88
0x6e0: a7ffffffffffffff     | 	.quad -89
0x6e8: 5a00000000000000     | 	.quad 90
0x6f0: 5b00000000000000     | 	.quad 91
0x6f8: a4ffffffffffffff     | 	.quad -92
0x700: a3ffffffffffffff     | 	.quad -93
0x708: a2ffffffffffffff     | 	.quad -94
0x710: a1ffffffffffffff     | 	.quad -95
0x718: a0ffffffffffffff     | 	.quad -96
0x720: 6100000000000000     | 	.quad 97
0x728: 9effffffffffffff     | 	.quad -98
0x730: 6300000000000000     | 	.quad 99
0x738: 6400000000000000     | 	.quad 100
0x740: 6500000000000000     | 	.quad 101
0x748: 6600000000000000     | 	.quad 102
0x750: 6700000000000000     | 	.quad 103
0x758: 6800000000000000     | 	.quad 104
0x760: 97ffffffffffffff     | 	.quad -105
0x768: 96ffffffffffffff     | 	.quad -106
0x770: 95ffffffffffffff     | 	.quad -107
0x778: 94ffffffffffffff     | 	.quad -108
0x780: 93ffffffffffffff     | 	.quad -109
0x788: 6e00000000000000     | 	.quad 110
0x790: 6f00000000000000     | 	.quad 111
0x798: 90ffffffffffffff     | 	.quad -112
0x7a0: 7100000000000000     | 	.quad 113
0x7a8: 7200000000000000     | 	.quad 114
0x7b0: 7300000000000000     | 	.quad 115
0x7b8: 7400000000000000     | 	.quad 116
0x7c0: 8bffffffffffffff     | 	.quad -117
0x7c8: 7600000000000000     | 	.quad 118
0x7d0: 7700000000000000     | 	.quad 119
0x7d8: 88ffffffffffffff     | 	.quad -120
0x7e0: 87ffffffffffffff     | 	.quad -121
0x7e8: 7a00000000000000     | 	.quad 122
0x7f0: 7b00000000000000     | 	.quad 123
0x7f8: 7c00000000000000     | 	.quad 124
0x800: 7d00000000000000     | 	.quad 125
0x808: 7e00000000000000     | 	.quad 126
0x810: 81ffffffffffffff     | 	.quad -127
0x818: 8000000000000000     | 	.quad 128
0x820: 7fffffffffffffff     | 	.quad -129
0x828: 7effffffffffffff     | 	.quad -130
0x830: 7dffffffffffffff     | 	.quad -131
0x838: 8400000000000000     | 	.quad 132
0x840: 8500000000000000     | 	.quad 133
0x848: 7affffffffffffff     | 	.quad -134
0x850: 79ffffffffffffff     | 	.quad -135
0x858: 78ffffffffffffff     | 	.quad -136
0x860: 77ffffffffffffff     | 	.quad -137
0x868: 8a00000000000000     | 	.quad 138
0x870: 75ffffffffffffff     | 	.quad -139
0x878: 8c00000000000000     | 	.quad 140
0x880: 73ffffffffffffff     | 	.quad -141
0x888: 8e00000000000000     | 	.quad 142
0x890: 8f00000000000000     | 	.quad 143
0x898: 9000000000000000     | 	.quad 144
0x8a0: 6fffffffffffffff     | 	.quad -145
0x8a8: 6effffffffffffff     | 	.quad -146
0x8b0: 6dffffffffffffff     | 	.quad -147
0x8b8: 9400000000000000     | 	.quad 148
0x8c0: 9500000000000000     | 	.quad 149
0x8c8: 6affffffffffffff     | 	.quad -150
0x8d0: 69ffffffffffffff     | 	.quad -151
0x8d8: 68ffffffffffffff     | 	.quad -152
0x8e0: 9900000000000000     | 	.quad 153
0x8e8: 9a00000000000000     | 	.quad 154
0x8f0: 9b00000000000000     | 	.quad 155
0x8f8: 9c00000000000000     | 	.quad 156
0x900: 63ffffffffffffff     | 	.quad -157
0x908: 9e00000000000000     | 	.quad 158
0x910: 61ffffffffffffff     | 	.quad -159
0x918: 60ffffffffffffff     | 	.quad -160
0x920: a100000000000000     | 	.quad 161
0x928: 5effffffffffffff     | 	.quad -162
0x930: 5dffffffffffffff     | 	.quad -163
0x938: 5cffffffffffffff     | 	.quad -164
0x940: a500000000000000     | 	.quad 165
0x948: a600000000000000     | 	.quad 166
0x950: 59ffffffffffffff     | 	.quad -167
0x958: 58ffffffffffffff     | 	.quad -168
0x960: a900000000000000     | 	.quad 169
0x968: aa00000000000000     | 	.quad 170
0x970: 55ffffffffffffff     | 	.quad -171
0x978: 54ffffffffffffff     | 	.quad -172
0x980: 53ffffffffffffff     | 	.quad -173
0x988: 52ffffffffffffff     | 	.quad -174
0x990: af00000000000000     | 	.quad 175
0x998: 50ffffffffffffff     | 	.quad -176
0x9a0: 4fffffffffffffff     | 	.quad -177
0x9a8: b200000000000000     | 	.quad 178
0x9b0: b300000000000000     | 	.quad 179
0x9b8: b400000000000000     | 	.quad 180
0x9c0: b500000000000000     | 	.quad 181
0x9c8: b600000000000000     | 	.quad 182
0x9d0: b700000000000000     | 	.quad 183
0x9d8: 48ffffffffffffff     | 	.quad -184
0x9e0: 47ffffffffffffff     | 	.quad -185
0x9e8: 46ffffffffffffff     | 	.quad -186
0x9f0: bb00000000000000     | 	.quad 187
0x9f8: 44ffffffffffffff     | 	.quad -188
0xa00: bd00000000000000     | 	.quad 189
0xa08: be00000000000000     | 	.quad 190
0xa10: bf00000000000000     | 	.quad 191
0xa18: 40ffffffffffffff     | 	.quad -192
0xa20: 3fffffffffffffff     | 	.quad -193
0xa28: 3effffffffffffff     | 	.quad -194
0xa30: 3dffffffffffffff     | 	.quad -195
0xa38: 3cffffffffffffff     | 	.quad -196
0xa40: c500000000000000     | 	.quad 197
0xa48: c600000000000000     | 	.quad 198
0xa50: c700000000000000     | 	.quad 199
0xa58: 38ffffffffffffff     | 	.quad -200
0xa60: c900000000000000     | 	.quad 201
0xa68: ca00000000000000     | 	.quad 202
0xa70: cb00000000000000     | 	.quad 203
0xa78: cc00000000000000     | 	.quad 204
0xa80: cd00000000000000     | 	.quad 205
0xa88: 32ffffffffffffff     | 	.quad -206
0xa90: cf00000000000000     | 	.quad 207
0xa98: d000000000000000     | 	.quad 208
0xaa0: d100000000000000     | 	.quad 209
0xaa8: 2effffffffffffff     | 	.quad -210
0xab0: 2dffffffffffffff     | 	.quad -211
0xab8: d400000000000000     | 	.quad 212
0xac0: 2bffffffffffffff     | 	.quad -213
0xac8: d600000000000000     | 	.quad 214
0xad0: d700000000000000     | 	.quad 215
0xad8: 28ffffffffffffff     | 	.quad -216
0xae0: d900000000000000     | 	.quad 217
0xae8: da00000000000000     | 	.quad 218
0xaf0: 25ffffffffffffff     | 	.quad -219
0xaf8: 24ffffffffffffff     | 	.quad -220
0xb00: 23ffffffffffffff     | 	.quad -221
0xb08: de00000000000000     | 	.quad 222
0xb10: 21ffffffffffffff     | 	.quad -223
0xb18: 20ffffffffffffff     | 	.quad -224
0xb20: e100000000000000     | 	.quad 225
0xb28: e200000000000000     | 	.quad 226
0xb30: 1dffffffffffffff     | 	.quad -227
0xb38: e400000000000000     | 	.quad 228
0xb40: e500000000000000     | 	.quad 229
0xb48: 1affffffffffffff     | 	.quad -230
0xb50: 19ffffffffffffff     | 	.quad -231
0xb58: 18ffffffffffffff     | 	.quad -232
0xb60: 17ffffffffffffff     | 	.quad -233
0xb68: 16ffffffffffffff     | 	.quad -234
0xb70: 15ffffffffffffff     | 	.quad -235
0xb78: 14ffffffffffffff     | 	.quad -236
0xb80: ed00000000000000     | 	.quad 237
0xb88: ee00000000000000     | 	.quad 238
0xb90: 11ffffffffffffff     | 	.quad -239
0xb98: 10ffffffffffffff     | 	.quad -240
0xba0: 0fffffffffffffff     | 	.quad -241
0xba8: f200000000000000     | 	.quad 242
0xbb0: f300000000000000     | 	.quad 243
0xbb8: f400000000000000     | 	.quad 244
0xbc0: 0bffffffffffffff     | 	.quad -245
0xbc8: f600000000000000     | 	.quad 246
0xbd0: f700000000000000     | 	.quad 247
0xbd8: f800000000000000     | 	.quad 248
0xbe0: f900000000000000     | 	.quad 249
0xbe8: 06ffffffffffffff     | 	.quad -250
0xbf0: 05ffffffffffffff     | 	.quad -251
0xbf8: fc00000000000000     | 	.quad 252
0xc00: fd00000000000000     | 	.quad 253
0xc08: fe00000000000000     | 	.quad 254
0xc10: ff00000000000000     | 	.quad 255
0xc18: 00ffffffffffffff     | 	.quad -256
0xc20: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0xc30:                      | 	.align 16
0xc30:                      | Predest:
0xc30: fadebc0000000000     | 	.quad 0xbcdefa
0xc38:                      | dest:
0xc38: abefcd0000000000     | 	.quad 0xcdefab
0xc40: abefcd0000000000     | 	.quad 0xcdefab
0xc48: abefcd0000000000     | 	.quad 0xcdefab
0xc50: abefcd0000000000     | 	.quad 0xcdefab
0xc58: abefcd0000000000     | 	.quad 0xcdefab
0xc60: abefcd0000000000     | 	.quad 0xcdefab
0xc68: abefcd0000000000     | 	.quad 0xcdefab
0xc70: abefcd0000000000     | 	.quad 0xcdefab
0xc78: abefcd0000000000     | 	.quad 0xcdefab
0xc80: abefcd0000000000     | 	.quad 0xcdefab
0xc88: abefcd0000000000     | 	.quad 0xcdefab
0xc90: abefcd0000000000     | 	.quad 0xcdefab
0xc98: abefcd0000000000     | 	.quad 0xcdefab
0xca0: abefcd0000000000     | 	.quad 0xcdefab
0xca8: abefcd0000000000     | 	.quad 0xcdefab
0xcb0: abefcd0000000000     | 	.quad 0xcdefab
0xcb8: abefcd0000000000     | 	.quad 0xcdefab
0xcc0: abefcd0000000000     | 	.quad 0xcdefab
0xcc8: abefcd0000000000     | 	.quad 0xcdefab
0xcd0: abefcd0000000000     | 	.quad 0xcdefab
0xcd8: abefcd0000000000     | 	.quad 0xcdefab
0xce0: abefcd0000000000     | 	.quad 0xcdefab
0xce8: abefcd0000000000     | 	.quad 0xcdefab
0xcf0: abefcd0000000000     | 	.quad 0xcdefab
0xcf8: abefcd0000000000     | 	.quad 0xcdefab
0xd00: abefcd0000000000     | 	.quad 0xcdefab
0xd08: abefcd0000000000     | 	.quad 0xcdefab
0xd10: abefcd0000000000     | 	.quad 0xcdefab
0xd18: abefcd0000000000     | 	.quad 0xcdefab
0xd20: abefcd0000000000     | 	.quad 0xcdefab
0xd28: abefcd0000000000     | 	.quad 0xcdefab
0xd30: abefcd0000000000     | 	.quad 0xcdefab
0xd38: abefcd0000000000     | 	.quad 0xcdefab
0xd40: abefcd0000000000     | 	.quad 0xcdefab
0xd48: abefcd0000000000     | 	.quad 0xcdefab
0xd50: abefcd0000000000     | 	.quad 0xcdefab
0xd58: abefcd0000000000     | 	.quad 0xcdefab
0xd60: abefcd0000000000     | 	.quad 0xcdefab
0xd68: abefcd0000000000     | 	.quad 0xcdefab
0xd70: abefcd0000000000     | 	.quad 0xcdefab
0xd78: abefcd0000000000     | 	.quad 0xcdefab
0xd80: abefcd0000000000     | 	.quad 0xcdefab
0xd88: abefcd0000000000     | 	.quad 0xcdefab
0xd90: abefcd0000000000     | 	.quad 0xcdefab
0xd98: abefcd0000000000     | 	.quad 0xcdefab
0xda0: abefcd0000000000     | 	.quad 0xcdefab
0xda8: abefcd0000000000     | 	.quad 0xcdefab
0xdb0: abefcd0000000000     | 	.quad 0xcdefab
0xdb8: abefcd0000000000     | 	.quad 0xcdefab
0xdc0: abefcd0000000000     | 	.quad 0xcdefab
0xdc8: abefcd0000000000     | 	.quad 0xcdefab
0xdd0: abefcd0000000000     | 	.quad 0xcdefab
0xdd8: abefcd0000000000     | 	.quad 0xcdefab
0xde0: abefcd0000000000     | 	.quad 0xcdefab
0xde8: abefcd0000000000     | 	.quad 0xcdefab
0xdf0: abefcd0000000000     | 	.quad 0xcdefab
0xdf8: abefcd0000000000     | 	.quad 0xcdefab
0xe00: abefcd0000000000     | 	.quad 0xcdefab
0xe08: abefcd0000000000     | 	.quad 0xcdefab
0xe10: abefcd0000000000     | 	.quad 0xcdefab
0xe18: abefcd0000000000     | 	.quad 0xcdefab
0xe20: abefcd0000000000     | 	.quad 0xcdefab
0xe28: abefcd0000000000     | 	.quad 0xcdefab
0xe30: abefcd0000000000     | 	.quad 0xcdefab
0xe38: abefcd0000000000     | 	.quad 0xcdefab
0xe40: abefcd0000000000     | 	.quad 0xcdefab
0xe48: abefcd0000000000     | 	.quad 0xcdefab
0xe50: abefcd0000000000     | 	.quad 0xcdefab
0xe58: abefcd0000000000     | 	.quad 0xcdefab
0xe60: abefcd0000000000     | 	.quad 0xcdefab
0xe68: abefcd0000000000     | 	.quad 0xcdefab
0xe70: abefcd0000000000     | 	.quad 0xcdefab
0xe78: abefcd0000000000     | 	.quad 0xcdefab
0xe80: abefcd0000000000     | 	.quad 0xcdefab
0xe88: abefcd0000000000     | 	.quad 0xcdefab
0xe90: abefcd0000000000     | 	.quad 0xcdefab
0xe98: abefcd0000000000     | 	.quad 0xcdefab
0xea0: abefcd0000000000     | 	.quad 0xcdefab
0xea8: abefcd0000000000     | 	.quad 0xcdefab
0xeb0: abefcd0000000000     | 	.quad 0xcdefab
0xeb8: abefcd0000000000     | 	.quad 0xcdefab
0xec0: abefcd0000000000     | 	.quad 0xcdefab
0xec8: abefcd0000000000     | 	.quad 0xcdefab
0xed0: abefcd0000000000     | 	.quad 0xcdefab
0xed8: abefcd0000000000     | 	.quad 0xcdefab
0xee0: abefcd0000000000     | 	.quad 0xcdefab
0xee8: abefcd0000000000     | 	.quad 0xcdefab
0xef0: abefcd0000000000     | 	.quad 0xcdefab
0xef8: abefcd0000000000     | 	.quad 0xcdefab
0xf00: abefcd0000000000     | 	.quad 0xcdefab
0xf08: abefcd0000000000     | 	.quad 0xcdefab
0xf10: abefcd0000000000     | 	.quad 0xcdefab
0xf18: abefcd0000000000     | 	.quad 0xcdefab
0xf20: abefcd0000000000     | 	.quad 0xcdefab
0xf28: abefcd0000000000     | 	.quad 0xcdefab
0xf30: abefcd0000000000     | 	.quad 0xcdefab
0xf38: abefcd0000000000     | 	.quad 0xcdefab
0xf40: abefcd0000000000     | 	.quad 0xcdefab
0xf48: abefcd0000000000     | 	.quad 0xcdefab
0xf50: abefcd0000000000     | 	.quad 0xcdefab
0xf58: abefcd0000000000     | 	.quad 0xcdefab
0xf60: abefcd0000000000     | 	.quad 0xcdefab
0xf68: abefcd0000000000     | 	.quad 0xcdefab
0xf70: abefcd0000000000     | 	.quad 0xcdefab
0xf78: abefcd0000000000     | 	.quad 0xcdefab
0xf80: abefcd0000000000     | 	.quad 0xcdefab
0xf88: abefcd0000000000     | 	.quad 0xcdefab
0xf90: abefcd0000000000     | 	.quad 0xcdefab
0xf98: abefcd0000000000     | 	.quad 0xcdefab
0xfa0: abefcd0000000000     | 	.quad 0xcdefab
0xfa8: abefcd0000000000     | 	.quad 0xcdefab
0xfb0: abefcd0000000000     | 	.quad 0xcdefab
0xfb8: abefcd0000000000     | 	.quad 0xcdefab
0xfc0: abefcd0000000000     | 	.quad 0xcdefab
0xfc8: abefcd0000000000     | 	.quad 0xcdefab
0xfd0: abefcd0000000000     | 	.quad 0xcdefab
0xfd8: abefcd0000000000     | 	.quad 0xcdefab
0xfe0: abefcd0000000000     | 	.quad 0xcdefab
0xfe8: abefcd0000000000     | 	.quad 0xcdefab
0xff0: abefcd0000000000     | 	.quad 0xcdefab
0xff8: abefcd0000000000     | 	.quad 0xcdefab
0x1000:abefcd0000000000      | 	.quad 0xcdefab
0x1008:abefcd0000000000      | 	.quad 0xcdefab
0x1010:abefcd0000000000      | 	.quad 0xcdefab
0x1018:abefcd0000000000      | 	.quad 0xcdefab
0x1020:abefcd0000000000      | 	.quad 0xcdefab
0x1028:abefcd0000000000      | 	.quad 0xcdefab
0x1030:abefcd0000000000      | 	.quad 0xcdefab
0x1038:abefcd0000000000      | 	.quad 0xcdefab
0x1040:abefcd0000000000      | 	.quad 0xcdefab
0x1048:abefcd0000000000      | 	.quad 0xcdefab
0x1050:abefcd0000000000      | 	.quad 0xcdefab
0x1058:abefcd0000000000      | 	.quad 0xcdefab
0x1060:abefcd0000000000      | 	.quad 0xcdefab
0x1068:abefcd0000000000      | 	.quad 0xcdefab
0x1070:abefcd0000000000      | 	.quad 0xcdefab
0x1078:abefcd0000000000      | 	.quad 0xcdefab
0x1080:abefcd0000000000      | 	.quad 0xcdefab
0x1088:abefcd0000000000      | 	.quad 0xcdefab
0x1090:abefcd0000000000      | 	.quad 0xcdefab
0x1098:abefcd0000000000      | 	.quad 0xcdefab
0x10a0:abefcd0000000000      | 	.quad 0xcdefab
0x10a8:abefcd0000000000      | 	.quad 0xcdefab
0x10b0:abefcd0000000000      | 	.quad 0xcdefab
0x10b8:abefcd0000000000      | 	.quad 0xcdefab
0x10c0:abefcd0000000000      | 	.quad 0xcdefab
0x10c8:abefcd0000000000      | 	.quad 0xcdefab
0x10d0:abefcd0000000000      | 	.quad 0xcdefab
0x10d8:abefcd0000000000      | 	.quad 0xcdefab
0x10e0:abefcd0000000000      | 	.quad 0xcdefab
0x10e8:abefcd0000000000      | 	.quad 0xcdefab
0x10f0:abefcd0000000000      | 	.quad 0xcdefab
0x10f8:abefcd0000000000      | 	.quad 0xcdefab
0x1100:abefcd0000000000      | 	.quad 0xcdefab
0x1108:abefcd0000000000      | 	.quad 0xcdefab
0x1110:abefcd0000000000      | 	.quad 0xcdefab
0x1118:abefcd0000000000      | 	.quad 0xcdefab
0x1120:abefcd0000000000      | 	.quad 0xcdefab
0x1128:abefcd0000000000      | 	.quad 0xcdefab
0x1130:abefcd0000000000      | 	.quad 0xcdefab
0x1138:abefcd0000000000      | 	.quad 0xcdefab
0x1140:abefcd0000000000      | 	.quad 0xcdefab
0x1148:abefcd0000000000      | 	.quad 0xcdefab
0x1150:abefcd0000000000      | 	.quad 0xcdefab
0x1158:abefcd0000000000      | 	.quad 0xcdefab
0x1160:abefcd0000000000      | 	.quad 0xcdefab
0x1168:abefcd0000000000      | 	.quad 0xcdefab
0x1170:abefcd0000000000      | 	.quad 0xcdefab
0x1178:abefcd0000000000      | 	.quad 0xcdefab
0x1180:abefcd0000000000      | 	.quad 0xcdefab
0x1188:abefcd0000000000      | 	.quad 0xcdefab
0x1190:abefcd0000000000      | 	.quad 0xcdefab
0x1198:abefcd0000000000      | 	.quad 0xcdefab
0x11a0:abefcd0000000000      | 	.quad 0xcdefab
0x11a8:abefcd0000000000      | 	.quad 0xcdefab
0x11b0:abefcd0000000000      | 	.quad 0xcdefab
0x11b8:abefcd0000000000      | 	.quad 0xcdefab
0x11c0:abefcd0000000000      | 	.quad 0xcdefab
0x11c8:abefcd0000000000      | 	.quad 0xcdefab
0x11d0:abefcd0000000000      | 	.quad 0xcdefab
0x11d8:abefcd0000000000      | 	.quad 0xcdefab
0x11e0:abefcd0000000000      | 	.quad 0xcdefab
0x11e8:abefcd0000000000      | 	.quad 0xcdefab
0x11f0:abefcd0000000000      | 	.quad 0xcdefab
0x11f8:abefcd0000000000      | 	.quad 0xcdefab
0x1200:abefcd0000000000      | 	.quad 0xcdefab
0x1208:abefcd0000000000      | 	.quad 0xcdefab
0x1210:abefcd0000000000      | 	.quad 0xcdefab
0x1218:abefcd0000000000      | 	.quad 0xcdefab
0x1220:abefcd0000000000      | 	.quad 0xcdefab
0x1228:abefcd0000000000      | 	.quad 0xcdefab
0x1230:abefcd0000000000      | 	.quad 0xcdefab
0x1238:abefcd0000000000      | 	.quad 0xcdefab
0x1240:abefcd0000000000      | 	.quad 0xcdefab
0x1248:abefcd0000000000      | 	.quad 0xcdefab
0x1250:abefcd0000000000      | 	.quad 0xcdefab
0x1258:abefcd0000000000      | 	.quad 0xcdefab
0x1260:abefcd0000000000      | 	.quad 0xcdefab
0x1268:abefcd0000000000      | 	.quad 0xcdefab
0x1270:abefcd0000000000      | 	.quad 0xcdefab
0x1278:abefcd0000000000      | 	.quad 0xcdefab
0x1280:abefcd0000000000      | 	.quad 0xcdefab
0x1288:abefcd0000000000      | 	.quad 0xcdefab
0x1290:abefcd0000000000      | 	.quad 0xcdefab
0x1298:abefcd0000000000      | 	.quad 0xcdefab
0x12a0:abefcd0000000000      | 	.quad 0xcdefab
0x12a8:abefcd0000000000      | 	.quad 0xcdefab
0x12b0:abefcd0000000000      | 	.quad 0xcdefab
0x12b8:abefcd0000000000      | 	.quad 0xcdefab
0x12c0:abefcd0000000000      | 	.quad 0xcdefab
0x12c8:abefcd0000000000      | 	.quad 0xcdefab
0x12d0:abefcd0000000000      | 	.quad 0xcdefab
0x12d8:abefcd0000000000      | 	.quad 0xcdefab
0x12e0:abefcd0000000000      | 	.quad 0xcdefab
0x12e8:abefcd0000000000      | 	.quad 0xcdefab
0x12f0:abefcd0000000000      | 	.quad 0xcdefab
0x12f8:abefcd0000000000      | 	.quad 0xcdefab
0x1300:abefcd0000000000      | 	.quad 0xcdefab
0x1308:abefcd0000000000      | 	.quad 0xcdefab
0x1310:abefcd0000000000      | 	.quad 0xcdefab
0x1318:abefcd0000000000      | 	.quad 0xcdefab
0x1320:abefcd0000000000      | 	.quad 0xcdefab
0x1328:abefcd0000000000      | 	.quad 0xcdefab
0x1330:abefcd0000000000      | 	.quad 0xcdefab
0x1338:abefcd0000000000      | 	.quad 0xcdefab
0x1340:abefcd0000000000      | 	.quad 0xcdefab
0x1348:abefcd0000000000      | 	.quad 0xcdefab
0x1350:abefcd0000000000      | 	.quad 0xcdefab
0x1358:abefcd0000000000      | 	.quad 0xcdefab
0x1360:abefcd0000000000      | 	.quad 0xcdefab
0x1368:abefcd0000000000      | 	.quad 0xcdefab
0x1370:abefcd0000000000      | 	.quad 0xcdefab
0x1378:abefcd0000000000      | 	.quad 0xcdefab
0x1380:abefcd0000000000      | 	.quad 0xcdefab
0x1388:abefcd0000000000      | 	.quad 0xcdefab
0x1390:abefcd0000000000      | 	.quad 0xcdefab
0x1398:abefcd0000000000      | 	.quad 0xcdefab
0x13a0:abefcd0000000000      | 	.quad 0xcdefab
0x13a8:abefcd0000000000      | 	.quad 0xcdefab
0x13b0:abefcd0000000000      | 	.quad 0xcdefab
0x13b8:abefcd0000000000      | 	.quad 0xcdefab
0x13c0:abefcd0000000000      | 	.quad 0xcdefab
0x13c8:abefcd0000000000      | 	.quad 0xcdefab
0x13d0:abefcd0000000000      | 	.quad 0xcdefab
0x13d8:abefcd0000000000      | 	.quad 0xcdefab
0x13e0:abefcd0000000000      | 	.quad 0xcdefab
0x13e8:abefcd0000000000      | 	.quad 0xcdefab
0x13f0:abefcd0000000000      | 	.quad 0xcdefab
0x13f8:abefcd0000000000      | 	.quad 0xcdefab
0x1400:abefcd0000000000      | 	.quad 0xcdefab
0x1408:abefcd0000000000      | 	.quad 0xcdefab
0x1410:abefcd0000000000      | 	.quad 0xcdefab
0x1418:abefcd0000000000      | 	.quad 0xcdefab
0x1420:abefcd0000000000      | 	.quad 0xcdefab
0x1428:abefcd0000000000      | 	.quad 0xcdefab
0x1430:abefcd0000000000      | 	.quad 0xcdefab
0x1438:                      | Postdest:
0x1438:bcfade0000000000      | 	.quad 0xdefabc
                             | 
0x1440:                      | .align 8
                             | # Run time stack
0x1440:0000000000000000      | 	.quad 0
0x1448:0000000000000000      | 	.quad 0
0x1450:0000000000000000      | 	.quad 0
0x1458:0000000000000000      | 	.quad 0
0x1460:0000000000000000      | 	.quad 0
0x1468:0000000000000000      | 	.quad 0
0x1470:0000000000000000      | 	.quad 0
0x1478:0000000000000000      | 	.quad 0
0x1480:0000000000000000      | 	.quad 0
0x1488:0000000000000000      | 	.quad 0
0x1490:0000000000000000      | 	.quad 0
0x1498:0000000000000000      | 	.quad 0
0x14a0:0000000000000000      | 	.quad 0
0x14a8:0000000000000000      | 	.quad 0
0x14b0:0000000000000000      | 	.quad 0
0x14b8:0000000000000000      | 	.quad 0
                             | 
0x14c0:                      | Stack:
